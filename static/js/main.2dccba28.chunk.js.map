{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","style","width","onChange","changeColor","defaultValue","value","onClick","toggleMode","role","htmlFor","Textform","useState","text","setText","color","heading","rows","event","target","backgroundColor","colorArray","textValue","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","trim","length","Alert","alert","word","lower","charAt","slice","Capitalize","msg","App","setMode","setAlert","setColor","setColorArray","message","setTimeout","colorValue","console","log","body","propTypes","PropTypes","string","isRequired","defaultProps","aboutText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2dccba28.chunk.js","sourcesContent":["import React from 'react'\n// import { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n            {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\n            <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                <li className=\"nav-item\">\n                    {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n                </li>\n                {/* <li className=\"nav-item\">\n                    <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n                </li> */}\n                </ul>\n                {/* <form className=\"d-flex\">\n                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                <button className=\"btn btn-primary\" type=\"submit\">Search</button>\n                </form> */}\n                <select className=\"form-select\" aria-label=\"Default select example\" style={{width:'10%'}} onChange={props.changeColor}>\n                    <option defaultValue>Select color</option>\n                    <option value=\"red\">Red</option>\n                    <option value=\"black\">Black</option>\n                </select>\n                <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n                    <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Darkmode</label>\n                </div>\n            </div>\n        </div>\n        </nav>\n    )\n}\n","import React,{useState} from 'react'\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nexport default function Textform(props) {\n    const[text, setText] = useState(\"\");\n    //const[isCopied, setIsCopied] = useState(false);\n    const handleUpperCaseEvent = ()=>{\n        let textValue = text.toUpperCase();\n        setText(textValue);\n        props.showAlert('Converted to uppercase!', 'success');\n    };\n    const handleLowerCaseEvent = ()=>{\n        let textValue = text.toLowerCase();\n        setText(textValue);\n        props.showAlert('Converted to lowercase!', 'success');\n    };\n    // const onCopyText = ()=>{\n    //     setIsCopied(true);\n    //     setTimeout(()=>{\n    //         setIsCopied(false);\n    //     }, 2000);\n    // }\n    const handleCopyText = ()=>{\n        var text = document.getElementById(\"myBox\");\n        text.select();\n        navigator.clipboard.writeText(text.value);\n        props.showAlert('Copied to clipboard!', 'success');\n    };\n    const handleExtraSpaces = ()=>{\n        let newText = text.split(/[  ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert('Extra spaces removed!', 'success');\n    };\n    const handleClearEvent = ()=>{\n        let textValue = \"\";\n        setText(textValue);\n        props.showAlert('Text has been cleared!', 'success');\n    };\n    const handleOnChangeEvent = (event)=>{\n        setText(event.target.value);\n    };\n\n    return (\n        <>\n            <div className=\"container\" style={{color:props.mode === 'dark' ? 'white' : 'black'}}>\n                <h1>{props.heading}</h1>\n                <div className=\"my-3\">\n                    <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChangeEvent} \n                    style={{backgroundColor: props.colorArray.backgroundColor,color:props.mode === 'dark' ? 'white' : 'black'}}></textarea>\n                </div>\n                <button className=\"btn btn-primary\" onClick={handleUpperCaseEvent}>Convert to Upper Case</button>\n                <button className=\"btn btn-primary mx-1\" onClick={handleLowerCaseEvent}>Convert to Lower Case</button>\n                <button className=\"btn btn-primary mx-1\" onClick={handleCopyText}>Copy Text</button>\n                <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n                <button className=\"btn btn-primary mx-1\" onClick={handleClearEvent}>Clear Text</button>\n                \n                {/* <CopyToClipboard text={text} onCopy={onCopyText}>\n                    <div className=\"copy-area\">\n                    <button className=\"btn btn-primary\">Copy To Clipboard</button>\n                        <span className={`copy-feedback ${isCopied ? \"active\" : \"\"}`}>\n                            {isCopied ? \"Copied!\" : \"\"} \n                        </span>\n                    </div>\n                </CopyToClipboard> */}\n            </div>\n            <div className=\"container my-3\" style={{color:props.mode === 'dark' ? 'white' : 'black'}}>\n                <h2>Your text summary</h2>\n                <p>{text === '' ? 0 : text.trim().split(\" \").length} words, {text.length} characters</p>\n                <p>{0.008 * text.split(\" \").length} minutes to read.</p>\n                <h2>Preview</h2>\n                <p>{text.length> 0 ? text : \"Enter the text in the above textbox to preview\"}</p>\n            </div>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const Capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    };\n    return (\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>{Capitalize(props.alert.type)}</strong> : {props.alert.msg}\n        </div>\n    )\n}\n\nexport default Alert\n","import React, { useState } from 'react'\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport PropTypes from 'prop-types'\nimport Textform from './components/Textform';\nimport About from './components/About';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const[mode, setMode] = useState('light');\n  const[alert, setAlert] = useState(null);\n  const[color, setColor] = useState('black');\n  const[colorArray, setColorArray] = useState({\n    'colorValue' : 'black',\n    'backgroundColor' : 'white'\n  });\n\n  const toggleMode = ()=>{\n    let backgroundColor = '';\n    let colorValue = '';\n    console.log(color)\n    if(mode === 'light'){\n      setMode('dark');\n      if(color === 'red'){\n        backgroundColor = '#dd0430';\n        colorValue = '';\n      }else{\n        backgroundColor = 'grey';\n        colorValue = '';\n      }\n      showAlert(\"Dark mode has been enabled!!!\", 'success');\n      document.title= 'Textutils - Dark Mode';\n    }else{\n      setMode('light');\n      if(color === 'red'){\n        backgroundColor = '#d9677e';\n        colorValue = '';\n      }else{\n        backgroundColor = 'white';\n        colorValue = '';\n      }\n      showAlert(\"Light mode has been enabled!!!\", 'success');\n      document.title= 'Textutils - Light Mode';\n    }\n\n    document.body.style.backgroundColor = backgroundColor;\n      setColorArray({\n        'color' : colorValue,\n        'backgroundColor' : backgroundColor\n      });\n  };\n  const changeColor = (event)=>{\n    setColor(event.target.value);\n    console.log(color);\n  };\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg : message,\n      type : type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} changeColor={changeColor}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        {/* <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\"> */}\n          <Textform heading=\"Enter the text to analyze \" mode={mode} showAlert={showAlert} colorArray={colorArray}/>\n          {/* </Route>\n        </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n  title: \"Add Title here\",\n  aboutText : \"About Us\"\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}